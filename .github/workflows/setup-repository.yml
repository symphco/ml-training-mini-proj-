
name: Setup repository
on:
  push:
    paths:
      - project.json # Only triggers this when project.json is updated (Required for initializing repository)

jobs:
  setup:
    permissions:
      contents: 'read'
      id-token: 'write'

    name: Initialize repository
    runs-on: ubuntu-latest
    env:
      REPO_SETUP_TOKEN: ${{ secrets.REPO_SETUP_TOKEN }}
      GCP_ORGANIZATION_ID: ${{ secrets.GCP_ORGANIZATION_ID }}
      GCP_BILLING_ID: ${{ secrets.GCP_BILLING_ID }}
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      GH_SHA: ${{ github.sha }}
      GH_RUN_NUMBER: ${{ github.run_number }}
      GH_REPOSITORY: ${{ github.repository }}
      GH_REPOSITORY_URL: ${{ github.repositoryUrl }}
      GH_REF_NAME: ${{ github.ref_name }}
      GCP_CLOUD_RUN_REGION: asia-east1
      GCP_GCR_REGION: asia
    steps:
      - name: Do not run scaffolding on template repository
        shell: bash
        # This workflow runs when the `project.json` file is modified.
        # This is the trick to re-init a repository, but we don't want to
        # run this action if this file is modified in the origin template repository.
        #
        # Using the GitHub rest API allows us to identify if the current repository
        # is a template repository or not.
        run: |
          curl --silent -X GET \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.baptiste-preview+json" \
            https://api.github.com/repos/$GITHUB_REPOSITORY \
            | jq --exit-status '.is_template == false';
      - uses: actions/checkout@v2
        with:
          # Committing workflow files using the regular GITHUB_TOKEN will fail with 
          # `Git Error: Refusing to allow a GitHub App to create or update workflow without workflows permission`.
          # This is by design to prevent third-parties from adding malicious workflow files.
          #
          # Generate a new personal access token with the workflow `scope` does the trick.
          # https://github.com/settings/tokens
          # and then put to the organization's Action Secrets
          # https://github.com/organizations/<organization>/settings/secrets/actions
          # At the moment, personal access tokens are only generated by actual github users
          # Since roles are associated to users and not organizations.
          # You can alternatively create a new github user solely used by your organization and create the personal access token from there.
          # Name the secret REPO_SETUP_TOKEN with values generated from https://github.com/settings/tokens (Personal Access Token)
          # For security's sake, make it only available for private repositories
          token: ${{ env.REPO_SETUP_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Get project name
        id: project_name
        uses: notiz-dev/github-action-json-property@release
        with: 
          path: 'project.json'
          prop_path: 'name'

      - name: Get template name
        id: template_name
        uses: notiz-dev/github-action-json-property@release
        with: 
          path: 'project.json'
          prop_path: 'template'

      - name: Get creator email
        id: creator_email
        uses: notiz-dev/github-action-json-property@release
        with: 
          path: 'project.json'
          prop_path: 'creator'

      - name: Setup Nodejs
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Generate Workspace
        run: npx create-nx-workspace --preset=${{steps.template_name.outputs.prop}} --name=${{steps.project_name.outputs.prop}} --appName=web --linter=eslint --style=styled-components --nxCloud --interactive=false

      - name: Generate API project for Workspace
        working-directory: ./${{steps.project_name.outputs.prop}}
        run: |
          npm install @nrwl/nest
          npx nx generate @nrwl/nest:app api --frontendProject=web
      
      - name: Cleanup workspace for copying
        shell: bash
        working-directory: ./${{steps.project_name.outputs.prop}}
        run: rm -rf node_modules
        
      - name: Prepare root directory
        shell: bash
        # Remove all files and folder except .git/ and project folder
        run: |
          find ./ -maxdepth 1 \
          ! -name '.git' \
          ! -name '.dockerignore' \
          ! -name 'Dockerfile.api' \
          ! -name 'Dockerfile.web' \
          ! -name 'package.json' \
          ! -name '**.template' \
          ! -name '${{steps.project_name.outputs.prop}}' \
          ! -name '.' \
          ! -exec rm -rf {} +

      - name: Move package.json to API
        shell: bash
        run: mv package.json ${{steps.project_name.outputs.prop}}/apps/api/

      - name: Move Nginx Web Configs to Web
        shell: bash
        run: mv nginx.conf.template ${{steps.project_name.outputs.prop}}/apps/web/

      - name: Move files to root
        shell: bash
        working-directory: ./${{steps.project_name.outputs.prop}}
        # The project folder contains a single folder which is the
        # generated project by Nx. We want to move all the project
        # files into the root directory so we can reinitialize git in the next step
        run: find . -mindepth 1 -maxdepth 1 -exec mv -t .. -- {} +

      - name: Update API Project Settings to generate package.json for Deployment
        uses: jossef/action-set-json-field@v1
        with:
          file: apps/api/project.json
          field: targets.build.options.generatePackageJson
          value: true
          parse_json: true
      
      - name: Authenticatie Google Cloud SDK using Work Identity Pool
        id: auth
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{env.GCP_WORKLOAD_IDENTITY_PROVIDER}}
          service_account: ${{env.GCP_SERVICE_ACCOUNT}}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          install_components: 'beta'

      - name: Use gcloud CLI
        run: gcloud info

        # TODO: Pipe the result to an environment variable $folder_id
        # https://cloud.google.com/resource-manager/docs/creating-managing-folders#gcloud_1
      # - name: Create Folder to Encompass project
        # run: gcloud resource-manager folders create --display-name=${{steps.project_name.outputs.prop}} --organization=${{env.GCP_ORGANIZATION_ID}}

      - name: Create Google Cloud project
        run: gcloud projects create ${{steps.project_name.outputs.prop}} --organization=${{env.GCP_ORGANIZATION_ID}}
        # run: gcloud projects create ${{steps.project_name.outputs.prop}} --organization=${{env.GCP_ORGANIZATION_ID}}  --folder=12345 

      - name: Make project creator email the owner of GCP project
        run: gcloud projects add-iam-policy-binding ${{steps.project_name.outputs.prop}} --member=user:${{steps.creator_email.outputs.prop}} --role=roles/owner

      # Configure docker to use the gcloud command-line tool as a credential helper
      - name: Configure docker using Gcloud auth
        run: gcloud auth configure-docker -q

      - name: Enable Google Cloud Billing API
        # Billing needs to be enabled first before enabling other services
        run: gcloud services enable cloudbilling.googleapis.com --project=${{steps.project_name.outputs.prop}} 
      
      - name: Connect a Billing Account to Project
        run: gcloud beta billing projects link ${{steps.project_name.outputs.prop}} --billing-account=${{env.GCP_BILLING_ID}}

      - name: Enable Google Cloud Needed APIs
        # Billing needs to be enabled first before enabling other services
        run: >
          gcloud services enable
          containerregistry.googleapis.com
          run.googleapis.com
          artifactregistry.googleapis.com
          cloudbuild.googleapis.com
          --project=${{steps.project_name.outputs.prop}}

      - name: Set SHA Short
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Print Short SHA
        run: echo ${{ steps.vars.outputs.sha_short }}
        
      - name: Build API Image
        shell: bash
        run: >
          docker build
          --build-arg ARG_BUILD_ID=${{ env.GH_RUN_NUMBER }}
          --build-arg ARG_PROJECT_ID=${{ steps.project_name.outputs.prop }}
          --build-arg ARG_COMMIT_SHA=${{ env.GH_SHA }}
          --build-arg ARG_REVISION_ID=${{ env.GH_SHA }}
          --build-arg ARG_SHORT_SHA=${{ steps.vars.outputs.sha_short }}
          --build-arg ARG_REPO_NAME=${{ env.GH_REPOSITORY }}
          --build-arg ARG_BRANCH_NAME=${{ env.GH_REF_NAME }}
          --build-arg ARG_TAG_NAME=${{ env.GH_REF_NAME }}.${{ env.GH_SHA }}
          -t ${{env.GCP_GCR_REGION}}.gcr.io/${{steps.project_name.outputs.prop}}/api:${{env.GH_SHA}} -f Dockerfile.api .

      - name: Build Web Image
        shell: bash
        run: >
          docker build 
          --build-arg ARG_BUILD_ID=${{ env.GH_RUN_NUMBER }}
          --build-arg ARG_PROJECT_ID=${{ steps.project_name.outputs.prop }}
          --build-arg ARG_COMMIT_SHA=${{ env.GH_SHA }}
          --build-arg ARG_REVISION_ID=${{ env.GH_SHA }}
          --build-arg ARG_SHORT_SHA=${{ steps.vars.outputs.sha_short }}
          --build-arg ARG_REPO_NAME=${{ env.GH_REPOSITORY }}
          --build-arg ARG_BRANCH_NAME=${{ env.GH_REF_NAME }}
          --build-arg ARG_TAG_NAME=${{ env.GH_REF_NAME }}.${{ env.GH_SHA }}
          -t ${{env.GCP_GCR_REGION}}.gcr.io/${{steps.project_name.outputs.prop}}/web:${{env.GH_SHA}} -f Dockerfile.web .

      - name: Set current GCP project to current project
        run: gcloud config set project ${{steps.project_name.outputs.prop}}

      - name: Push image to Google Container Registry
        shell: bash
        run: |
          docker push ${{env.GCP_GCR_REGION}}.gcr.io/${{steps.project_name.outputs.prop}}/api:${{env.GH_SHA}}
          docker push ${{env.GCP_GCR_REGION}}.gcr.io/${{steps.project_name.outputs.prop}}/web:${{env.GH_SHA}}

      - name: Deploy API to Cloud run
        id: 'deploy_api'
        run: |-
          gcloud run deploy api \
            --quiet \
            --region ${{env.GCP_CLOUD_RUN_REGION}} \
            --image "${{env.GCP_GCR_REGION}}.gcr.io/${{steps.project_name.outputs.prop}}/api:${{env.GH_SHA}}" \
            --platform "managed" \
            --allow-unauthenticated \
            --project ${{steps.project_name.outputs.prop}}
      
      - name: Deploy Web to Cloud run
        id: 'deploy_web'
        run: |-
          gcloud run deploy web \
            --quiet \
            --region ${{env.GCP_CLOUD_RUN_REGION}} \
            --image "${{env.GCP_GCR_REGION}}.gcr.io/${{steps.project_name.outputs.prop}}/web:${{env.GH_SHA}}" \
            --platform "managed" \
            --allow-unauthenticated \
            --project ${{steps.project_name.outputs.prop}}

      - name: Get Deployed URLs
        id: deployed_urls
        run: |
          echo "api_url=$(gcloud run services describe api --region ${{env.GCP_CLOUD_RUN_REGION}} --format='value(status.url)' --project ${{steps.project_name.outputs.prop}})" >> $GITHUB_ENV
          echo "web_url=$(gcloud run services describe web --region ${{env.GCP_CLOUD_RUN_REGION}} --format='value(status.url)' --project ${{steps.project_name.outputs.prop}})" >> $GITHUB_ENV

      - name: Display Deployed URLs
        run: |
          echo ${{env.api_url}}
          echo ${{env.web_url}}

      - name: Remove Generated GHA Creds
        run: rm gha-creds-*.json

      - name: Reinitialize git repository
        shell: bash
        # Reinitialize git after scaffolding this repository.
        # We use `git checkout --orphan` to create a branch in a git init-like state.
        # By force pushing this as `master` we end up with a new clean git history.
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com" && \
          git config --global user.name "github-actions[bot]" && \
          git checkout --orphan temp-branch && \
          git add . && \
          git commit -m 'Initial commit' && \
          git push origin temp-branch:master -f
      
      - name: Success Email with Details
        uses: cinotify/github-action@main
        with:
          to: ${{steps.creator_email.outputs.prop}}
          subject: "[Symph][Github] Project ${{steps.project_name.outputs.prop}} is now ready"
          body: "GCP Project ID: ${{steps.project_name.outputs.prop}}\nProject Creator: ${{steps.creator_email.outputs.prop}}\nRepository URL: ${{env.GH_REPOSITORY_URL}}\nDeployed URLs (API, Web):\n${{env.api_url}}\n${{env.web_url}}"